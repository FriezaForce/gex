name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create archive (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          $archiveName = "gex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip"
          Compress-Archive -Path target/${{ matrix.target }}/release/gex.exe -DestinationPath $archiveName
          echo "ASSET_PATH=$archiveName" >> $env:GITHUB_ENV
          echo "ASSET_NAME=$archiveName" >> $env:GITHUB_ENV

      - name: Create archive (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          ARCHIVE_NAME="gex-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz"
          tar -czf "$ARCHIVE_NAME" -C target/${{ matrix.target }}/release gex
          echo "ASSET_PATH=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "ASSET_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true
